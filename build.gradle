// --------------- root of all gradle configurations
// This is the gradle of apps directory sources defining the main class there
// Use the gradle.setting file

allprojects { // apply yo this project and all sub projects

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    ext {
        set('springCloudVersion', "Hoxton.M3")
    }

    ext {
        set('elasticsearch.version', '6.8.4')
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    dependencies {

        implementation 'org.apache.logging.log4j:log4j-core:2.12.1'
        implementation 'org.apache.logging.log4j:log4j-api:2.12.1'
        implementation 'com.vlkan.log4j2:log4j2-logstash-layout:0.21'

        // Test
        testImplementation 'org.mockito:mockito-core:2.+'
        testImplementation 'com.github.javafaker:javafaker:1.0.1'

        testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    // Custom task for validate the project structure gradle :view_paths
    task view_paths {
        doLast { task ->
            println "$task.project.name"
            println "------------------"
            println "Main: $sourceSets.main.java.srcDirTrees"
            println "   Resources: $sourceSets.main.resources.srcDirTrees"
            println "Tests: $sourceSets.test.java.srcDirTrees"
            println "   Resources: $sourceSets.test.resources.srcDirTrees"
        }
    }

}

// ---------------------- All sub projects (located in src/*)


subprojects {
    group = "com.ddd.video.example.${rootProject.name}"

    sourceSets {
        // modify the project structure of java
        main {
            java { srcDirs = ['main'] }
            resources { srcDirs = ['main/resources'] }
        }

        test {
            java { srcDirs = ['test'] }
            resources { srcDirs = ['test/resources'] }
        }
    }

    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-web:2.1.8.RELEASE'

        // HIBERNATE DEPENDENCY
        implementation 'org.hibernate:hibernate-core:5.4.5.Final'
        implementation 'org.springframework:spring-orm:5.1.10.RELEASE'
        implementation 'org.apache.tomcat:tomcat-dbcp:9.0.26'
        implementation 'com.sun.xml.bind:jaxb-impl:2.1.2'
        implementation 'javax.xml.bind:jaxb-api:2.3.1'

        runtime 'mysql:mysql-connector-java:8.0.17'

        testImplementation rootProject.sourceSets.main.output
        testImplementation 'org.springframework.boot:spring-boot-starter-test:2.1.8.RELEASE'

        if (project.name != "shared") {
            implementation project(":shared")
            testImplementation project(":shared").sourceSets.test.output
        }
    }


    bootJar { // in the sub projects do not generate the spring boot jar , only a plain jar
        enabled = false
    }

    jar {  //
        enabled = true
    }
}


// --------------------------------------- Main project (located in apps/)

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE')
    }
}

sourceSets {
    main {
        java { srcDirs = ['apps/main'] }
        resources { srcDirs = ['apps/main/resources'] }
    }

    test {
        java { srcDirs = ['apps/test'] }
        resources { srcDirs = ['apps/test/resources'] }
    }
}

apply plugin: 'application'

bootJar {
    baseName = 'ddd-by-example'
    version = '0.0.1'
}

mainClassName = 'com.ddd.apps.Starter'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.1.8.RELEASE'


    // TODO include Context dependencies
    implementation project(":shared")
    implementation project(":backoffice")
    implementation project(":mooc")

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.1.8.RELEASE'
    testImplementation project(":shared").sourceSets.test.output

    testCompile("org.springframework.boot:spring-boot-starter-test")
}
